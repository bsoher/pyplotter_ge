# -*- coding: ISO-8859-1 -*-
#
# generated by wxGlade 1.0.4 on Sun Jul  3 11:42:33 2022
#

import wx

# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
# end wxGlade


class PyPlotterGeFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: PyPlotterGeFrame.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.SetSize((1094, 866))
        self.SetTitle("frame_1")

        sizer_1 = wx.BoxSizer(wx.VERTICAL)

        self.panel_1 = wx.Panel(self, wx.ID_ANY)
        sizer_1.Add(self.panel_1, 1, wx.EXPAND, 0)

        sizer_2 = wx.BoxSizer(wx.VERTICAL)

        sizer_3 = wx.StaticBoxSizer(wx.StaticBox(self.panel_1, wx.ID_ANY, ""), wx.HORIZONTAL)
        sizer_2.Add(sizer_3, 0, wx.ALL | wx.EXPAND, 2)

        sizer_13 = wx.StaticBoxSizer(wx.StaticBox(self.panel_1, wx.ID_ANY, ""), wx.VERTICAL)
        sizer_3.Add(sizer_13, 1, wx.EXPAND, 0)

        sizer_30 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_13.Add(sizer_30, 0, wx.ALL | wx.EXPAND, 2)

        label_1 = wx.StaticText(self.panel_1, wx.ID_ANY, "Source Dir : ")
        sizer_30.Add(label_1, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT, 2)

        self.TextSourceDir = wx.TextCtrl(self.panel_1, wx.ID_ANY, "default", style=wx.TE_READONLY)
        self.TextSourceDir.SetMinSize((-1,-1))
        sizer_30.Add(self.TextSourceDir, 1, wx.ALIGN_CENTER_VERTICAL | wx.LEFT, 4)

        label_2 = wx.StaticText(self.panel_1, wx.ID_ANY, "Current File : ")
        sizer_30.Add(label_2, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT, 8)

        self.TextCurrentFile = wx.TextCtrl(self.panel_1, wx.ID_ANY, "default", style=wx.TE_READONLY)
        self.TextCurrentFile.SetMinSize((-1,-1))
        sizer_30.Add(self.TextCurrentFile, 1, wx.ALIGN_CENTER_VERTICAL | wx.LEFT, 4)

        sizer_4 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_13.Add(sizer_4, 1, wx.ALL | wx.EXPAND, 2)

        label_3 = wx.StaticText(self.panel_1, wx.ID_ANY, "Node Number :  ")
        label_3.SetToolTip("Number of data items to offset from start of the file before reading in 'count' data items. Note - the actual offset in bytes is calculated automatically based on this number times the size of the DataType widget above.")
        sizer_4.Add(label_3, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT, 2)

        self.SpinNodeNumber = wx.SpinCtrl(self.panel_1, wx.ID_ANY, "0", min=0, max=0)
        sizer_4.Add(self.SpinNodeNumber, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT, 4)

        self.PanePlots = wx.Panel(self.panel_1, wx.ID_ANY)
        sizer_2.Add(self.PanePlots, 1, wx.EXPAND, 0)

        sizer_6 = wx.BoxSizer(wx.VERTICAL)

        self.PanelPlot = wx.Panel(self.PanePlots, wx.ID_ANY)
        sizer_6.Add(self.PanelPlot, 1, wx.ALL | wx.EXPAND, 1)

        self.PanePlots.SetSizer(sizer_6)

        self.panel_1.SetSizer(sizer_2)

        self.SetSizer(sizer_1)

        self.Layout()

        self.Bind(wx.EVT_SPINCTRL, self.on_node_number, self.SpinNodeNumber)
        self.Bind(wx.EVT_TEXT_ENTER, self.on_node_number, self.SpinNodeNumber)
        # end wxGlade

    def on_node_number(self, event):  # wxGlade: PyPlotterGeFrame.<event_handler>
        print("Event handler 'on_node_number' not implemented!")
        event.Skip()

# end of class PyPlotterGeFrame
